Variables
---------
lvalue:
    - Expressions referring to memory location.
    - Either left or right hand side of assignment
    - Variables

rvalue:
    - Data value stored at some address.
    - Cannot have value assigned to it, always right hand
    - Actual values / literals

Constants
---------
Integers:
    - 0x or 0X : hexadecimal
    - 0 : octal
    - nothing : decimal

Escape Characters: Begin with \

Defining Constants:
    - #define name value
    - const type name = value


Operators
---------
Bitwise: & (and), | (or), ^ (01 or 10)
Miscellaneous: & (variable address), * (pointer), ? _ : _ (conditional)

Loops
---------
While, For, Do-While

Conditionals
---------
if, if...else, nested if, switch, nested switch

Methods
---------
1. Creating a method
- (return_type) method_name: (argType1) argName1
        paramName2:(argType2) argName2 {
        body of function
  }
2. Calling a method
[instance method:argName1 paramName2:argName2]

Blocks
---------
Object + Data w/ Related Behavior
Represent 1 task instead of multiple methods

Declaration: returntype (^blockName)(argumentType);
Implementation: returntype (^blockName)(argumentType) = ^{};
Invocation: blockName();

Numbers
---------
Cast different primitive values to NSNumber class as specific type
NSNumber *result = [NSNumber numberWith(fill in blank!):product];

Pointers
---------
Pointer: Variable where value is address of another variable.
- * : specifies a variable is a pointer, extracts value of pointer
- & : denotes address of non-pointer variable
- Best Practice: Assign pointers to null if no values at the moment.

Strings
---------
Refer to NSString class

Preprocessor
---------
- Text substitution tool instructing compiler to pre-process BEFORE compilation

Typedef
---------
1. Give a type an alias
2. Give name to user-defined data type

Handling
---------
- Log: NSLog, DebugLog
- Error: NSError (Domain, Code, User Info)

Objective-C Categories
---------
Allows extending an existing class by adding behavior useful in specific situations
Put simply, allows adding a method to an existing class.

Posing (Deprecated)
---------
One class "poses", or, replaces another class within a program.
Useful for replacing a built in class with a custom class
Posing class MUST be a descendant of the target Class
Code: [MyCustomString poseAsClass:[NSString class]];

Extension
---------
Use () to keep adding private methods / instance fields to a class in a separate block.

Protocol
---------
Guidelines that a class must follow

@protocol ProtocolName
@required
// list of required methods
@optional
// list of optional methods
@end

@interface MyClass:NSObject <ProtocolName>
...
@end

Class Cluster
---------
- Groups private concrete subclasses under public abstract superclass
- Instead of multiple classes w/ similar functions => one overlord superclass
